name: "Code Review Action"
description: "AI 코드 리뷰와 접근성 검사 및 마크업 검증을 수행하는 GitHub 액션"
author: "Jonsoku"

inputs:
  # 디버그 설정
  debug:
    description: "디버그 모드 활성화 여부"
    required: false
    default: "false"

  reporter:
    description: "리포트 형식 (github-check, github-pr-review, github-status, slack)"
    required: false
    default: "github-check"

  workdir:
    description: "작업 디렉토리 경로"
    required: false
    default: "."

  github_token:
    description: "GitHub Token"
    required: true
    default: ${{ github.token }}

  # AI 리뷰어 설정
  ai_reviewer_enabled:
    description: "AI 리뷰어 활성화 여부"
    required: false
    default: "true"

  ai_reviewer_use_mock_api:
    description: "OpenAI API 대신 Mock API 사용 여부"
    required: false
    default: "false"

  ai_reviewer_api_key:
    description: "OpenAI API 키"
    required: false
    default: ""

  ai_reviewer_language:
    description: "AI 리뷰어 언어"
    required: false
    default: "ko"

  ai_reviewer_api_language:
    description: "OpenAI API 언어"
    required: false
    default: "ko"

  ai_reviewer_model:
    description: "사용할 AI 모델"
    required: false
    default: "gpt-4o"

  ai_reviewer_max_tokens:
    description: "최대 토큰 수"
    required: false
    default: "1000"

  ai_reviewer_temperature:
    description: "AI 응답의 다양성 (0.0-1.0)"
    required: false
    default: "0.7"

  ai_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{js,jsx,ts,tsx}"

  ai_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  # Axe 리뷰어 설정
  axe_reviewer_enabled:
    description: "Axe 접근성 검사 활성화 여부"
    required: false
    default: "false"

  axe_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{html,jsx,tsx}"

  axe_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  axe_reviewer_standard:
    description: "접근성 표준 (WCAG2A, WCAG2AA, WCAG2AAA)"
    required: false
    default: "WCAG2AA"

  # HTML 검증기 설정
  html_reviewer_enabled:
    description: "HTML 검증기 활성화 여부"
    required: false
    default: "false"

  html_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{html,htm}"

  html_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  html_reviewer_validator_url:
    description: "W3C 검증기 URL (기본값: https://validator.w3.org/nu/)"
    required: false
    default: "https://validator.w3.org/nu/"

  html_reviewer_use_mock_api:
    description: "W3C 검증기 대신 Mock API 사용 여부"
    required: false
    default: "false"

  # CSS 검증기 설정
  css_reviewer_enabled:
    description: "CSS 검증기 활성화 여부"
    required: false
    default: "false"

  css_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{css,scss,less}"

  css_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  css_reviewer_config_path:
    description: "Stylelint 설정 파일 경로"
    required: false
    default: ".stylelintrc.json"

  css_reviewer_use_mock_api:
    description: "Stylelint 대신 Mock 검사 사용 여부"
    required: false
    default: "false"

  # 인라인 코드 검출기 설정
  inline_code_reviewer_enabled:
    description: "인라인 코드 검출기 활성화 여부"
    required: false
    default: "false"

  inline_code_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{html,htm}"

  inline_code_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  inline_code_reviewer_script_threshold:
    description: "인라인 스크립트 경고 임계값 (라인 수)"
    required: false
    default: "5"

  inline_code_reviewer_style_threshold:
    description: "인라인 스타일 경고 임계값 (라인 수)"
    required: false
    default: "10"

  # 이미지 최적화 검사기 설정
  image_reviewer_enabled:
    description: "이미지 최적화 검사기 활성화 여부"
    required: false
    default: "false"

  image_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{html,htm,jpg,jpeg,png,gif,webp,svg}"

  image_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  image_reviewer_size_threshold:
    description: "이미지 크기 경고 임계값 (KB)"
    required: false
    default: "200"

  image_reviewer_dimension_threshold:
    description: "이미지 크기 경고 임계값 (픽셀)"
    required: false
    default: "1000"

  # 페이지 구조 분석기 설정
  page_structure_reviewer_enabled:
    description: "페이지 구조 분석기 활성화 여부"
    required: false
    default: "false"

  page_structure_reviewer_file_patterns:
    description: "검사할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/*.{html,htm}"

  page_structure_reviewer_exclude_patterns:
    description: "제외할 파일 패턴 (쉼표로 구분)"
    required: false
    default: "**/node_modules/**,**/dist/**"

  page_structure_reviewer_strict_heading_order:
    description: "엄격한 헤딩 순서 검사 여부"
    required: false
    default: "false"

  page_structure_reviewer_check_meta_tags:
    description: "메타 태그 검사 여부"
    required: false
    default: "true"

  # 결과 처리 설정
  fail_on_error:
    description: "에러 발생 시 액션 실패 여부"
    required: false
    default: "true"

  comment_mode:
    description: "코멘트 모드 [pr_comment, inline, both]"
    required: false
    default: "both"

runs:
  using: "composite"
  steps:
    # 1. 환경 설정
    - name: Setup environment
      shell: bash
      run: |
        # 디버그 모드 설정
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG=true" >> $GITHUB_ENV
          set -x
        fi

        # workdir이 기본값이 아닌 경우 파일 복사
        if [ "${{ inputs.workdir }}" != "." ]; then
          echo "사용자 지정 workdir에서 파일 복사 중..."
          mkdir -p ${{ github.action_path }}/workspace
          cp -r ${{ github.workspace }}/${{ inputs.workdir }}/* ${{ github.action_path }}/workspace/
          echo "WORKSPACE_PATH=${{ github.action_path }}/workspace" >> $GITHUB_ENV
        else
          echo "WORKSPACE_PATH=${{ github.workspace }}" >> $GITHUB_ENV
        fi

        # 기본 설정
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
        echo "FAIL_ON_ERROR=${{ inputs.fail_on_error }}" >> $GITHUB_ENV
        echo "COMMENT_MODE=${{ inputs.comment_mode }}" >> $GITHUB_ENV

        # AI 리뷰어 설정
        echo "AI_REVIEWER_ENABLED=${{ inputs.ai_reviewer_enabled }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_USE_MOCK_API=${{ inputs.ai_reviewer_use_mock_api }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_API_KEY=${{ inputs.ai_reviewer_api_key }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_LANGUAGE=${{ inputs.ai_reviewer_language }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_API_LANGUAGE=${{ inputs.ai_reviewer_api_language }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_MODEL=${{ inputs.ai_reviewer_model }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_MAX_TOKENS=${{ inputs.ai_reviewer_max_tokens }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_TEMPERATURE=${{ inputs.ai_reviewer_temperature }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_FILE_PATTERNS=${{ inputs.ai_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "AI_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.ai_reviewer_exclude_patterns }}" >> $GITHUB_ENV

        # Axe 리뷰어 설정
        echo "AXE_REVIEWER_ENABLED=${{ inputs.axe_reviewer_enabled }}" >> $GITHUB_ENV
        echo "AXE_REVIEWER_FILE_PATTERNS=${{ inputs.axe_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "AXE_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.axe_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "AXE_REVIEWER_STANDARD=${{ inputs.axe_reviewer_standard }}" >> $GITHUB_ENV

        # HTML 검증기 설정
        echo "HTML_REVIEWER_ENABLED=${{ inputs.html_reviewer_enabled }}" >> $GITHUB_ENV
        echo "HTML_REVIEWER_FILE_PATTERNS=${{ inputs.html_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "HTML_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.html_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "HTML_REVIEWER_VALIDATOR_URL=${{ inputs.html_reviewer_validator_url }}" >> $GITHUB_ENV
        echo "HTML_REVIEWER_USE_MOCK_API=${{ inputs.html_reviewer_use_mock_api }}" >> $GITHUB_ENV

        # CSS 검증기 설정
        echo "CSS_REVIEWER_ENABLED=${{ inputs.css_reviewer_enabled }}" >> $GITHUB_ENV
        echo "CSS_REVIEWER_FILE_PATTERNS=${{ inputs.css_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "CSS_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.css_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "CSS_REVIEWER_CONFIG_PATH=${{ inputs.css_reviewer_config_path }}" >> $GITHUB_ENV
        echo "CSS_REVIEWER_USE_MOCK_API=${{ inputs.css_reviewer_use_mock_api }}" >> $GITHUB_ENV

        # 인라인 코드 검출기 설정
        echo "INLINE_CODE_REVIEWER_ENABLED=${{ inputs.inline_code_reviewer_enabled }}" >> $GITHUB_ENV
        echo "INLINE_CODE_REVIEWER_FILE_PATTERNS=${{ inputs.inline_code_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "INLINE_CODE_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.inline_code_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "INLINE_CODE_REVIEWER_SCRIPT_THRESHOLD=${{ inputs.inline_code_reviewer_script_threshold }}" >> $GITHUB_ENV
        echo "INLINE_CODE_REVIEWER_STYLE_THRESHOLD=${{ inputs.inline_code_reviewer_style_threshold }}" >> $GITHUB_ENV

        # 이미지 최적화 검사기 설정
        echo "IMAGE_REVIEWER_ENABLED=${{ inputs.image_reviewer_enabled }}" >> $GITHUB_ENV
        echo "IMAGE_REVIEWER_FILE_PATTERNS=${{ inputs.image_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "IMAGE_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.image_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "IMAGE_REVIEWER_SIZE_THRESHOLD=${{ inputs.image_reviewer_size_threshold }}" >> $GITHUB_ENV
        echo "IMAGE_REVIEWER_DIMENSION_THRESHOLD=${{ inputs.image_reviewer_dimension_threshold }}" >> $GITHUB_ENV

        # 페이지 구조 분석기 설정
        echo "PAGE_STRUCTURE_REVIEWER_ENABLED=${{ inputs.page_structure_reviewer_enabled }}" >> $GITHUB_ENV
        echo "PAGE_STRUCTURE_REVIEWER_FILE_PATTERNS=${{ inputs.page_structure_reviewer_file_patterns }}" >> $GITHUB_ENV
        echo "PAGE_STRUCTURE_REVIEWER_EXCLUDE_PATTERNS=${{ inputs.page_structure_reviewer_exclude_patterns }}" >> $GITHUB_ENV
        echo "PAGE_STRUCTURE_REVIEWER_STRICT_HEADING_ORDER=${{ inputs.page_structure_reviewer_strict_heading_order }}" >> $GITHUB_ENV
        echo "PAGE_STRUCTURE_REVIEWER_CHECK_META_TAGS=${{ inputs.page_structure_reviewer_check_meta_tags }}" >> $GITHUB_ENV

        # 활성화된 리뷰어 자동 설정
        ENABLED_REVIEWERS=""

        # AI 리뷰어 설정 확인
        if [ "${{ inputs.ai_reviewer_enabled }}" = "true" ]; then
          ENABLED_REVIEWERS="ai"
        fi

        # Axe 리뷰어 설정 확인
        if [ "${{ inputs.axe_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,axe"
          else
            ENABLED_REVIEWERS="axe"
          fi
        fi

        # HTML 검증기 설정 확인
        if [ "${{ inputs.html_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,html"
          else
            ENABLED_REVIEWERS="html"
          fi
        fi

        # CSS 검증기 설정 확인
        if [ "${{ inputs.css_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,css"
          else
            ENABLED_REVIEWERS="css"
          fi
        fi

        # 인라인 코드 검출기 설정 확인
        if [ "${{ inputs.inline_code_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,inline-code"
          else
            ENABLED_REVIEWERS="inline-code"
          fi
        fi

        # 이미지 최적화 검사기 설정 확인
        if [ "${{ inputs.image_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,image"
          else
            ENABLED_REVIEWERS="image"
          fi
        fi

        # 페이지 구조 분석기 설정 확인
        if [ "${{ inputs.page_structure_reviewer_enabled }}" = "true" ]; then
          if [ -n "$ENABLED_REVIEWERS" ]; then
            ENABLED_REVIEWERS="$ENABLED_REVIEWERS,page-structure"
          else
            ENABLED_REVIEWERS="page-structure"
          fi
        fi

        echo "ENABLED_REVIEWERS=$ENABLED_REVIEWERS" >> $GITHUB_ENV

    # 2. Node.js 설정
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    # 3. 설정 파일 생성
    - name: Setup configurations
      shell: bash
      run: |
        cd $WORKSPACE_PATH
        if [ "${{ inputs.workdir }}" != "." ]; then
          mkdir -p ${{ inputs.workdir }}
          cd ${{ inputs.workdir }}
          cp -r ${{ github.action_path }}/configs/* ./
        else
          cp -r ${{ github.action_path }}/configs/* ./
        fi
        node ${{ github.action_path }}/dist/setup-configs.js

    # 4. 리뷰 실행
    - name: Run reviews
      shell: bash
      run: |
        cd $WORKSPACE_PATH
        if [ "${{ inputs.workdir }}" != "." ]; then
          cd ${{ inputs.workdir }}
        fi
        node ${{ github.action_path }}/dist/run-reviews.js
