(()=>{"use strict";var e={856:function(e,o,n){var r=this&&this.__createBinding||(Object.create?function(e,o,n,r){if(r===undefined)r=n;var s=Object.getOwnPropertyDescriptor(o,n);if(!s||("get"in s?!o.__esModule:s.writable||s.configurable)){s={enumerable:true,get:function(){return o[n]}}}Object.defineProperty(e,r,s)}:function(e,o,n,r){if(r===undefined)r=n;e[r]=o[n]});var s=this&&this.__setModuleDefault||(Object.create?function(e,o){Object.defineProperty(e,"default",{enumerable:true,value:o})}:function(e,o){e["default"]=o});var c=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var o={};if(e!=null)for(var n in e)if(n!=="default"&&Object.prototype.hasOwnProperty.call(e,n))r(o,e,n);s(o,e);return o};Object.defineProperty(o,"__esModule",{value:true});const t=c(n(147));const i=c(n(17));function copyConfigFiles(e,o){console.log(`\n[${e}] 설정 파일 복사 시작`);const n=process.env.GITHUB_ACTION_PATH||__dirname;let r=i.join(n,"configs",e);console.log(`[${e}] 액션 경로:`,n);console.log(`[${e}] 소스 디렉토리 경로:`,r);if(!t.existsSync(r)){console.error(`[${e}] 소스 디렉토리가 존재하지 않습니다:`,r);const o=i.join(n,"..","configs",e);console.log(`[${e}] 상위 디렉토리 탐색:`,o);if(t.existsSync(o)){console.log(`[${e}] 상위 디렉토리에서 configs 발견`);r=o}else{throw new Error(`소스 디렉토리를 찾을 수 없음: ${r} 또는 ${o}`)}}try{const n=t.readdirSync(r);console.log(`[${e}] 복사할 파일 목록:`,n);n.forEach((n=>{const s=i.join(r,n);const c=i.join(process.cwd(),n);try{if(o&&n.endsWith(".json")){console.log(`[${e}] 사용자 정의 설정 파일 사용:`,o);if(!t.existsSync(o)){throw new Error(`사용자 정의 설정 파일을 찾을 수 없음: ${o}`)}t.copyFileSync(o,c)}else{console.log(`[${e}] 기본 설정 파일 복사:`,n);if(!t.existsSync(s)){throw new Error(`소스 파일을 찾을 수 없음: ${s}`)}t.copyFileSync(s,c)}console.log(`[${e}] ✓ ${n} 복사 완료 -> ${c}`)}catch(o){const r=o;console.error(`[${e}] ✗ ${n} 복사 실패:`,r.message);throw r}}));console.log(`[${e}] 모든 설정 파일 복사 완료`)}catch(o){const n=o;console.error(`[${e}] 설정 파일 복사 중 오류 발생:`,n.message);throw n}}function createConfig(e){console.log("\n=== 설정 파일 생성 시작 ===");console.log("현재 작업 디렉토리:",process.cwd());try{if(e.skip_ai_review!=="true"){copyConfigFiles("ai",e.ai_config_path)}else{console.log("\n[ai] 건너뛰기")}if(e.skip_accessibility!=="true"){copyConfigFiles("axe",e.axe_config_path)}else{console.log("\n[axe] 건너뛰기")}console.log("\n✅ 모든 설정 파일 생성 완료");console.log("현재 작업 디렉토리:",process.cwd())}catch(e){const o=e;console.error("\n❌ 설정 파일 생성 중 오류 발생:",o.message);process.exit(1)}}console.log("\n=== 설정값 ===");const l={skip_ai_review:process.env.INPUT_SKIP_AI_REVIEW||"false",skip_accessibility:process.env.INPUT_SKIP_ACCESSIBILITY||"false",ai_config_path:process.env.INPUT_AI_CONFIG_PATH||"",axe_config_path:process.env.INPUT_AXE_CONFIG_PATH||""};console.log("환경변수 디버그 정보:");Object.keys(process.env).forEach((e=>{if(e.startsWith("INPUT_")){console.log(`${e}:`,process.env[e])}}));console.log("\n설정된 입력값:");Object.entries(l).forEach((([e,o])=>{console.log(`${e}: ${o}`)}));createConfig(l)},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")}};var o={};function __nccwpck_require__(n){var r=o[n];if(r!==undefined){return r.exports}var s=o[n]={exports:{}};var c=true;try{e[n].call(s.exports,s,s.exports,__nccwpck_require__);c=false}finally{if(c)delete o[n]}return s.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var n=__nccwpck_require__(856);module.exports=n})();